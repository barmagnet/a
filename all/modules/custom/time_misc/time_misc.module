<?php

/**
 * @file
 * Small customisations for the Time website.
 */

/**
 * To use a function in a custom module instead of writing the code in text area create a function that looks like:

function computed_field_YOUR_FIELD_MACHINE_NAME_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = 'value';
}

Parameters:
&$entity_field - The computed field. Used to store the computed value.
$entity_type - The entity type: node, user, comment, etc.
$entity - The actual entity (a node, user, comment, etc.)
$field - General field settings.
$instance - Field instance settings.
$items - The list of items.
Note:
Make sure $entity_field is passed by reference.

 */


function computed_field_field_job_deadline_compute(
  &$entity_field,
  $entity_type,
  $entity,
  $field,
  $instance,
  $langcode,
  $items
){
  //dsm( func_get_args() );

  if ( $entity_type != 'node' || $entity->type != 'job' ) {
    return;
  }

  $job_nid = $entity->nid;

  $query = db_select( 'field_data_field_visit_job', 'job' );
  $query->join( 'node', 'n', 'job.revision_id = n.vid'  );
  $query->join(
    'field_data_field_visit_date', 'date', 'date.revision_id = n.vid'  );

  // Doing a left join here because the information we want is about
  // those Visits with no support-worker assigned.
  $query->leftJoin(
    'field_data_field_visit_sw', 'sw', 'sw.revision_id = n.vid'  );
  
  $query
    ->fields( 'date', array( 'field_visit_date_value' ) )
    ->condition( 'job.field_visit_job_target_id', $job_nid )
    ->condition( 'n.status', 1 )
    ->condition( 'sw.field_visit_sw_target_id', NULL )
    ->orderBy( 'date.field_visit_date_value', 'ASC' )
    ->range( 0, 1 );

  //dsm( $query->__toString() );

  $result = $query->execute()->fetchField();

  //dsm( $result );

  $entity_field[0]['value'] = $result ? $result : '';
}

function time_misc_node_presave( $node ) {
  //dsm( $node );

  if ( $node->type != 'visit' ) {
    return;
  }
  else if ( _time_misc_is_change_in_relevant_job( $node ) ) {

    _time_misc_queue_resaving_relevant_jobs( $node );
    //dsm( 'job change');
  }
  else if ( _time_misc_is_relevant_job( $node ) ) {

    if ( _time_misc_is_change_in_assigned_status( $node )  ||
      _time_misc_is_change_in_time( $node ) ) {

        _time_misc_queue_resaving_relevant_jobs( $node );
        //dsm( 'time or sw change');
      }
  }

  $queue = _time_misc_jobs_queue();
  //dsm( $queue->getJobs() );
}

function time_misc_node_insert( $node ) {
  if ( $node->type == 'visit' ) {
    $queue = _time_misc_jobs_queue();
    $queue->resaveJobs();
  }
}

function time_misc_node_update( $node ) {
  if ( $node->type == 'visit' ) {
    $queue = _time_misc_jobs_queue();
    $queue->resaveJobs();
  }
}

function _time_misc_is_change_in_relevant_job( $visit ) {
  $relevant_jobs = _time_misc_get_relevant_jobs( $visit );
  return $relevant_jobs['prev'] != $relevant_jobs['cur'];
}

function _time_misc_is_relevant_job( $visit ) {
  $relevant_jobs = _time_misc_get_relevant_jobs( $visit );
  return ! empty( $relevant_jobs['cur'] );
} 

function _time_misc_is_change_in_assigned_status( $visit ) {

  return
    empty( $visit->original->field_visit_sw['und'][0]['target_id'] )
    !=
    empty( $visit->field_visit_sw['und'][0]['target_id'] );
}

function _time_misc_is_change_in_time( $visit ) {

  $prev_date = NULL;
  if ( ! empty( $visit->original->field_visit_date['und'][0]['value'] ) ) {
    $prev_date = $visit->original->field_visit_date['und'][0]['value'];
  }

  $cur_date = NULL;
  if ( ! empty( $visit->field_visit_date['und'][0]['value'] ) ) {
    $cur_date = $visit->field_visit_date['und'][0]['value'];
  }

  return $prev_date != $cur_date;
}

function _time_misc_queue_resaving_relevant_jobs( $visit ) {
  $relevant_jobs = _time_misc_get_relevant_jobs( $visit );

  if ( ! $relevant_jobs['cur'] ) {
    unset( $relevant_jobs['cur'] );
  }
  if ( ! $relevant_jobs['prev'] ) {
    unset( $relevant_jobs['prev'] );
  }
  if ( count( $relevant_jobs ) == 2  &&
    $relevant_jobs['cur'] == $relevant_jobs['prev'] ) {
      unset( $relevant_jobs['prev'] );
    }

  $queue = _time_misc_jobs_queue();
  $queue->setJobs( $relevant_jobs );
}

function _time_misc_get_relevant_jobs( $visit ) {

  $prev_job = NULL;
  if ( ! empty( $visit->original->field_visit_job['und'][0]['target_id'] ) ) {
    $prev_job = $visit->original->field_visit_job['und'][0]['target_id'];
  }

  $cur_job = NULL;
  if ( ! empty( $visit->field_visit_job['und'][0]['target_id'] ) ) {
    $cur_job = $visit->field_visit_job['und'][0]['target_id'];
  }

  return array( 'prev' => $prev_job, 'cur' => $cur_job );
}

class time_misc_JobsResaveQueue {

  private $theQueue = array();

  public function getJobs() {
    return $this->theQueue;
  }

  public function setJobs( $job_nids ) {
    $this->theQueue = $job_nids;
  }

  private function discardJobs() {
    $this->theQueue = array();
  }

  public function resaveJobs() {
    if ( is_array( $this->theQueue ) ) {
      foreach ( $this->theQueue as $nid ) {
        node_save( node_load( $nid ) );
      }
      $this->discardJobs();
    }
  }
}

function _time_misc_jobs_queue() {
  static $x = NULL;
  if ( is_null( $x ) ) {
    $x = new time_misc_JobsResaveQueue();
  }
  return $x;
}

