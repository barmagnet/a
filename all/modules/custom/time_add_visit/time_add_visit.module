<?php

/**
 * @file
 * Access modifications and form pre-filling for Visit creation.
 */


function time_add_visit_permission() {
  return array(
    'create visits for other users' => array(
      'title' => 'Create visits for other users',
    )
  );
}

function time_add_visit_menu_alter(&$items) {

  //dsm( $items['node/add/visit'] );
  $items['node/add/visit']['access callback'] =
    '_time_add_visit_add_visit_access';
}

function _time_add_visit_add_visit_access( $op, $node ) {
  return ( node_access( $op, $node ) &&
    user_access( 'create visits for other users' ) );
}

function time_add_visit_menu() {
  return array(

    'job/%node/add-visit' => array(
      'description' => 'Add a Visit for a given Job',
      'access callback' => '_time_add_visit_page_access',
      'access arguments' => array(1),
      'title callback' => '_time_add_visit_page_title',
      'title arguments' => array(1),
      'page callback' => '_time_add_visit_page_content',
      'page arguments' => array(1),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

function _time_add_visit_page_access( $job ) {

  if ( ! node_access( 'create', 'visit' ) ) {
    drupal_set_message(
      t( 'You do not have permission to add Visits.' ),
      'error'
    );
    return FALSE;
  }
  else if ( user_access( 'create visits for other users' ) ) {
    return TRUE;
  }
  else {
    global $user;
    $is_assigned =  _time_add_visit_is_user_assigned_to_job( $job, $user );

    if( $is_assigned ) {
      return TRUE;
    }
    else {
      drupal_set_message(
        t(
          'You cannot add a Visit for Job @nid, because you have not been assigned to that Job',
          array( '@nid' => $job->nid )
        ),
        'error'
      );
      return FALSE;
    }
  }
}
  
function _time_add_visit_page_title( $job ) {
  return t( 'Add Visit for Job @nid', array( '@nid' => $job->nid ) );
}

function _time_add_visit_page_content( $job ) {
  //dsm( $job );
  //  return "stuff";
  module_load_include('inc', 'node', 'node.pages');
  return node_add( 'visit' ); //drupal_get_form( 'visit_node_form' );
}

function time_add_visit_form_visit_node_form_alter(&$form, &$form_state) {

  $is_job_specific_form = (
    arg(0) == 'job' &&
    is_numeric( arg(1) ) &&
    arg(2) == 'add-visit'
  );

  if ( ! $is_job_specific_form ) {
    return;
  }

  $job_nid = arg(1);

  $sw_options = _time_add_visit_get_support_worker_field_options(
    $job_nid, $form['field_visit_sw']['und']['#options'] );

  if ( user_access( 'create visits for other users' ) ) {

    // Allow user to add a Visit for anyone assigned to the relevant Job.
    $form['field_visit_sw']['und']['#options'] = $sw_options;
  }
  else {
    global $user;

    // Only allow the current user to add Visits for themself.
    if ( array_key_exists( $user->uid, $sw_options ) ) {
      $form['field_visit_sw']['und']['#options'] = array(
        $user->uid => $sw_options[$user->uid] );
    }
    else {
      // Access rules should have stopped us getting here!
      drupal_set_message( t( 'Error. Not assigned to job', error ) );
      unset( $form['field_visit_sw']['und']['#options'] );
    }
  }

  // Force the Job field to refer to the relevant Job.
  $job_options = $form['field_visit_job']['und']['#options'];
  $form['field_visit_job']['und']['#options'] = array(
    $job_nid => $job_options[$job_nid] );
}

function _time_add_visit_get_support_worker_field_options( $job_nid, $original_options ) {

  $job_node = node_load( $job_nid );
  //dsm( $job_node );

  $user_ids = _time_add_visit_get_assigned_user_ids( $job_node );
  array_unshift( $user_ids, '_none' );
  //dsm( $user_ids );

  // Build an options array from the collected user IDs and the original
  // set of options.
  $options = array();
  foreach ( $user_ids as $uid ) {
    $options[$uid] = $original_options[$uid];
  }
  //dsm( $options );

  return $options;
}

function _time_add_visit_is_user_assigned_to_job( $job, $user ) {
  return in_array(
    $user->uid, _time_add_visit_get_assigned_user_ids( $job ) );
}

function _time_add_visit_get_assigned_user_ids( $job ) {
  $result = array();
  if ( ! empty( $job->field_job_assignee['und'] ) ) {
    foreach ( $job->field_job_assignee['und'] as $user_ref ) {
      $result[] = $user_ref['target_id'];
    }
  }
  //dsm( $result);
  return $result;
}

